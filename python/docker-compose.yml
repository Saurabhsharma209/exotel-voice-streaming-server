version: '3.8'

services:
  voice-ai-server:
    build: .
    container_name: voice-ai-server
    restart: unless-stopped
    ports:
      - "5000:5000"  # WebSocket server
      - "5001:5001"  # Web dashboard
    environment:
      # Server Configuration
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=5000
      - WEB_DASHBOARD_PORT=5001
      - LOG_LEVEL=INFO
      - PRODUCTION_MODE=true
      
      # AI Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PRIMARY_STT_PROVIDER=whisper
      - PRIMARY_TTS_PROVIDER=gtts
      - PREFER_LLM_NLP=true
      
      # Audio Processing
      - AUDIO_CHUNK_SIZE=10
      - SILENCE_THRESHOLD=0.01
      - RESAMPLER_BACKEND=pydub
      
      # Sales Bot Configuration
      - SALES_BOT_NAME=${SALES_BOT_NAME:-Sarah}
      - COMPANY_NAME=${COMPANY_NAME:-TechSolutions Inc.}
      
      # Performance
      - MAX_CONCURRENT_CALLS=50
      - CALL_TIMEOUT_SECONDS=1800
      
      # Security
      - REQUIRE_AUTH=false
      - RATE_LIMITING_ENABLED=true
      
      # Monitoring
      - METRICS_ENABLED=true
      - DETAILED_ANALYTICS=true
      - CONVERSATION_RECORDING=true
      
    volumes:
      - ./logs:/app/logs
      - ./models:/app/models  # For Vosk models
    
    networks:
      - voice-ai-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Optional: Redis for session storage and caching
  redis:
    image: redis:7-alpine
    container_name: voice-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - voice-ai-network
    command: redis-server --appendonly yes

  # Optional: Database for persistent storage
  postgres:
    image: postgres:15-alpine
    container_name: voice-ai-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=voiceai
      - POSTGRES_USER=voiceai
      - POSTGRES_PASSWORD=${DB_PASSWORD:-voiceai123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - voice-ai-network

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: voice-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - voice-ai-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: voice-ai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - voice-ai-network

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: voice-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - voice-ai-network
    depends_on:
      - voice-ai-server

networks:
  voice-ai-network:
    driver: bridge

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data: 